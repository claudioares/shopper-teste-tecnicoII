services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile  # Especificando o Dockerfile do backend
    container_name: backend-app
    ports:
      - "8080:8080"  # Expondo backend na porta 8080
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}  # Lê a chave da API do .env
      - NODE_ENV=production
    networks:
      - app-network
    depends_on:
      postgres-db:
        condition: service_healthy  # O backend depende do banco de dados

  # PostgreSQL Database Service
  postgres-db:
    image: postgres:latest  # Usando imagem oficial do PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    container_name: postgres-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - ./backend/sql/create-tables.sql:/docker-entrypoint-initdb.d/create-tables.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend  # Diretório do código frontend
      dockerfile: Dockerfile  # Especificando o Dockerfile do frontend
    container_name: frontend-app
    ports:
      - "80:4173"  # Expondo frontend na porta 80
    networks:
      - app-network

volumes:
  postgres-data:  # Volume persistente para dados do banco
    driver: local

networks:
  app-network:  # Rede compartilhada entre os contêineres
    driver: bridge
